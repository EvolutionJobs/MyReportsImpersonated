Imports System.Data

Partial Class _NewPassword
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(sender As Object, e As System.EventArgs) Handles Me.Load
		'     <add name="BIWindowsConnectionString" connectionString="Initial Catalog=BI;Data Source=10.11.24.21;Integrated Security=SSPI;application name=WHUA"/>

		'Initial catalog=BI;data source=10.11.24.21;Integrated Security=SSPI;persist security info=True;
		'Initial Catalog=BI;Data Source=10.11.24.21;Integrated Security=SSPI;Persist security info=True;application name=WHUA


		lblStatus.Text = ""

		'Dim stest As String = "123456789"
		'lblStatus.Text = stest.Substring(0, 4) & "<br />"
		'lblStatus.Text &= stest.Substring(4)

		lblWindowsUsername.Text = HttpContext.Current.User.Identity.Name

        'BIWindowsConnectionString = ConfigurationManager.ConnectionStrings("EDConnectionString").ConnectionString
        BIWindowsConnectionString = ConfigurationManager.ConnectionStrings("BIWindowsConnectionString").ConnectionString

        lnkcmdVerifyMobile.Visible = False
        lnkcmdVerifyEmail.Visible = False

		pnlNewPasswordStep1.Visible = False
        pnlNewPasswordStep2.Visible = False
        pnlNewPasswordStep3.Visible = False
		pnlNewPasswordStep4.Visible = False

		Try

			Dim bVerifyRequired As Boolean = False

			' get the phone/email and then display HR or haveDetails panels accodingly
			Dim sGetError As String = ""
			Dim sDBPhone As String = ""
			Dim sDBEmail As String = ""

			' 1. check if the phone/email has been entered
			' 2. shiw verify link
			Using lib1 As New clsDB(BIWindowsConnectionString)
				' 1. get Stored info for comparison
				sGetError = lib1.GetPhoneOrEmail(lblWindowsUsername.Text, sDBPhone, sDBEmail)
				lblMobile.Text = sDBPhone
				lblEmail.Text = sDBEmail
			End Using

			If sGetError.Trim <> "" Then
				lblStatus.Text = sGetError
			Else

				If sDBPhone.Trim <> "" Or sDBEmail.Trim <> "" Then

					Dim outPhoneCode As String = ""
					Dim outEmailCode As String = ""
					Using lib1 As New clsDB(BIWindowsConnectionString)
						' 1. get Stored info for comparison
						sGetError = lib1.GetVerificationCodes(lblWindowsUsername.Text, outPhoneCode, outEmailCode)
					End Using

					If sDBPhone.Trim <> "" Then
						' there is a saved phone
						If outPhoneCode.Trim <> "" Then
							lnkcmdVerifyMobile.Visible = True
							bVerifyRequired = True
						Else
						End If
					End If

					If sDBEmail.Trim <> "" Then
						' there is a saved email
						If outEmailCode.Trim <> "" Then
							lnkcmdVerifyEmail.Visible = True
							bVerifyRequired = True
						Else
						End If
					End If

				Else
				End If

			End If

			' this can happen regardless of whether it is a new password, forgotten password or account info
			If bVerifyRequired = True Then
				Session("action") = "NewPasswordStep2"
			End If


			If Session("action") = "NewPasswordStep1" Then
				' call HR and refresh
				lblHeading.Text = "Request New Password"

				pnlNewPasswordStep1.Visible = True
				pnlNewPasswordStep2.Visible = False
				pnlNewPasswordStep3.Visible = False
				pnlNewPasswordStep4.Visible = False

			ElseIf Session("action") = "NewPasswordStep2" Then
				' show verify and send code
				lblHeading.Text = "Verify contact details"

				pnlNewPasswordStep1.Visible = False
				pnlNewPasswordStep2.Visible = True
				pnlNewPasswordStep3.Visible = False
				pnlNewPasswordStep4.Visible = False

			ElseIf Session("action") = "NewPasswordStep3" Then
				' enter the code
				lblHeading.Text = "Enter verification code"

				pnlNewPasswordStep1.Visible = False
				pnlNewPasswordStep2.Visible = False
				pnlNewPasswordStep3.Visible = True
				pnlNewPasswordStep4.Visible = False

			ElseIf Session("action") = "NewPasswordStep4" Then
				' force them to enter new password
				lblHeading.Text = "Create New password"

				pnlNewPasswordStep1.Visible = False
				pnlNewPasswordStep2.Visible = False
				pnlNewPasswordStep3.Visible = False
				pnlNewPasswordStep4.Visible = True

			Else
				' call HR and refresh
				lblHeading.Text = "Request New Password"

				pnlNewPasswordStep1.Visible = True
				pnlNewPasswordStep2.Visible = False
				pnlNewPasswordStep3.Visible = False
				pnlNewPasswordStep4.Visible = False

			End If




		Catch ex As Exception
		End Try


        If Me.IsPostBack = False Then


        End If

    End Sub





    Protected Sub lnkcmdRefresh_Click(sender As Object, e As EventArgs) Handles lnkcmdRefresh.Click

		Response.Redirect(Request.Url.ToString)

	End Sub





	'Protected Function UpdatePhoneOrEmail(
	'    ByVal PhoneEntered As String,
	'    ByVal EmailEntered As String
	'    ) As String

	'    Dim sReturn As String = ""

	'    ' save the details and if they have chnaged, then go to the verify page
	'    Dim sGetError As String = ""

	'    Dim sDBPhone As String = ""
	'    Dim sDBEmail As String = ""

	'    ' 1. check if the phone/email has changed
	'    ' 2. update the email/phone
	'    ' 3. verify is either has changed
	'    Using lib1 As New clsDB(BIWindowsConnectionString)
	'        ' 1. get Stored info for comparison
	'        sGetError = lib1.GetPhoneOrEmail(lblWindowsUsername.Text, sDBPhone, sDBEmail)
	'    End Using

	'    If sGetError.Trim <> "" Then
	'        sReturn = sGetError
	'    Else

	'        ' now compare mobile and email
	'        If PhoneEntered.Trim <> "" Then
	'            If sDBPhone.Trim <> "" Then
	'                If sDBPhone.Trim.Replace(" ", "") <> PhoneEntered.Trim.Replace(" ", "") Then
	'                    ' entered phone is different from stored phone
	'                    ' save it and then redirect to verify page

	'                    ' 1. SAVE it without spaces and with a +
	'                    ' 2. get verification code
	'                    ' 3. Send SMS and 
	'                    ' 4. redirect to code entry page

	'                    ' 1. SAVE
	'                    Using lib1 As New clsDB(BIWindowsConnectionString)
	'                        ' 1. get Stored info for comparison
	'                        sGetError = lib1.SaveUserPhone(lblWindowsUsername.Text, PhoneEntered.Trim.Replace(" ", ""))
	'                    End Using

	'                    If sGetError.Trim <> "" Then
	'                        sReturn = sGetError
	'                    Else

	'                        ' 2. get verification code and send

	'                        SendVerificationSMS(PhoneEntered.Trim.Replace(" ", ""))

	'                    End If


	'                Else
	'                    ' not changed
	'                    sReturn = "Mobile number already saved"
	'                End If

	'            End If
	'        End If

	'        If EmailEntered.Trim <> "" Then
	'            If sDBEmail.Trim <> "" Then
	'                If sDBEmail.Trim.Replace(" ", "") <> EmailEntered.Trim Then
	'                    ' entered phone is different from stored phone
	'                    ' save it and then redirect to verify page

	'                    ' 1. SAVE it without spaces and with a +
	'                    ' 2. get verification code
	'                    ' 3. Send emil and 
	'                    ' 4. redirect to code entry page

	'                    ' 1. SAVE
	'                    Using lib1 As New clsDB(BIWindowsConnectionString)
	'                        ' 1. get Stored info for comparison
	'                        sGetError = lib1.SaveUserEmail(lblWindowsUsername.Text, EmailEntered.Trim)
	'                    End Using

	'                    If sGetError.Trim <> "" Then
	'                        sReturn = sGetError
	'                    Else

	'                        ' 2. get verification code and send

	'                        SendVerificationEmail(EmailEntered.Trim)

	'                    End If

	'                Else
	'                    ' not changed
	'                    sReturn = "Mobile saved successfully"
	'                End If

	'            End If
	'        End If


	'    End If

	'    Return sReturn
	'End Function



	Protected Function SendVerificationSMS(ByVal PhoneEntered As String) As String
        Dim sReturn As String = ""
        Dim sGetError As String = ""
        Dim outPhoneCode As String = ""
        Dim outEmailCode As String = ""
        Using lib1 As New clsDB(BIWindowsConnectionString)
            ' 1. get Stored info for comparison
            sGetError = lib1.GetVerificationCodes(lblWindowsUsername.Text, outPhoneCode, outEmailCode)
        End Using

        If sGetError.Trim <> "" Then
            sReturn = sGetError.Trim
        Else

			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent





			' 3. Send SMS 
			' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
			' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
			' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
			' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
			' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
			Dim sSMSMessage As String = String.Format(sSMSVerificationMessage, outPhoneCode)
            Dim sSMSError As String = SendSMS(PhoneEntered.Trim.Replace(" ", "").Replace("+", "00") & "@evotext.net", sSMSMessage)


            ' 4. redirect to code entry page
            If sSMSError.Trim <> "" Then
                sReturn = sSMSError.Trim
            Else
                Session("action") = "NewPasswordStep3"
                pnlNewPasswordStep1.Visible = False
                pnlNewPasswordStep2.Visible = False
                pnlNewPasswordStep3.Visible = True
                pnlNewPasswordStep4.Visible = False
            End If

        End If

        Return sReturn
    End Function


    Protected Function SendVerificationEmail(ByVal EmailEntered As String) As String
        Dim sReturn As String = ""
        Dim sGetError As String = ""
        Dim outPhoneCode As String = ""
        Dim outEmailCode As String = ""
        Using lib1 As New clsDB(BIWindowsConnectionString)
            ' 1. get Stored info for comparison
            sGetError = lib1.GetVerificationCodes(lblWindowsUsername.Text, outPhoneCode, outEmailCode)
        End Using

		If sGetError.Trim <> "" Then
			sReturn = sGetError.Trim
		Else

			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent
			' TODO: append the new password to the code sent





			' 3. Send email 
			Dim sSMSMessage As String = String.Format(sEmailVerificationMessage, outEmailCode)
            ' sendng SMS is same as sending email!!!
            Dim sSMSError As String = SendSMS(EmailEntered.Trim, sSMSMessage)


            ' 4. redirect to code entry page
            If sSMSError.Trim <> "" Then
                sReturn = sSMSError.Trim
            Else
                Session("action") = "NewPasswordStep3"
                pnlNewPasswordStep1.Visible = False
                pnlNewPasswordStep2.Visible = False
                pnlNewPasswordStep3.Visible = True
                pnlNewPasswordStep4.Visible = False

            End If
        End If

        Return sReturn

    End Function





    Protected Sub lnkcmdVerifyMobile_Click(sender As Object, e As EventArgs) Handles lnkcmdVerifyMobile.Click
        ' go to the relevant verify page
        lblStatus.Text = SendVerificationSMS(lblMobile.Text.Trim)
    End Sub


    Protected Sub lnkcmdVerifyEmail_Click(sender As Object, e As EventArgs) Handles lnkcmdVerifyEmail.Click
        ' go to the relevant verify page
        lblStatus.Text = SendVerificationEmail(lblEmail.Text.Trim)
    End Sub



    'Protected Sub lnkGetNewPassword_Click(sender As Object, e As EventArgs) Handles lnkGetNewPassword.Click

    '    ' ----------------------- test ------------------------
    '    'Dim sError1 As String = SendSMS("07910030684@evotext.net", "Hi Stu")
    '    ''Dim sError As String = SendSMS("07910030684@evotext.net", "test")
    '    'Dim sError1 As String = SendSMS2("07507342793@evotext.net", "testrr")

    '    'If sError1.Trim <> "" Then
    '    '    lblStatus.Text &= "With Broadlook: " & sError1
    '    'Else
    '    '    lblStatus.Text &= "With Broadlook: " & "SMS sent with code to login - must be changed on first login" & "<br /><br />"
    '    'End If

    '    'Dim sError2 As String = SendSMS("07507342793@evotext.net", "Hi Me")

    '    'If sError2.Trim <> "" Then
    '    '    lblStatus.Text &= "Without Broadlook: " & sError2
    '    'Else
    '    '    lblStatus.Text &= "Without Broadlook: " & "SMS sent with code to login - must be changed on first login" & "<br /><br />"
    '    'End If

    '    'Dim sError As String = SendSMS2("sanjay.patel@evolutionjobs.co.uk", "test")
    '    ' ----------------------- test ------------------------




    '    Dim dtCons As New System.Data.DataTable
    '    Using lib1 As New clsMyReports(BIWindowsConnectionString)
    '        dtCons = lib1.GetNewPasswordForAUser("Evolution2", 517)
    '    End Using

    '    Dim sCode As String = ""
    '    If dtCons IsNot Nothing Then

    '        Dim iCount As Integer = 0
    '        Dim row As DataRow
    '        For Each row In dtCons.Rows

    '            If Not IsDBNull(row(0)) Then
    '                sCode = row(0)
    '                Exit For
    '            End If
    '            iCount += 1
    '        Next

    '        ' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
    '        ' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
    '        ' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
    '        ' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
    '        ' IMPORTANT : THE SMS ONLY WORKS ON A SERVER BECAUSE IT HAS TO HAVE RIGHTS TO RELAY TO EXTERNAL DOMAIN
    '        Dim sError As String = SendSMS2("07507342793@evotext.net", "test")
    '        'Dim sError As String = SendSMS("sanjay.patel@evolutionjobs.co.uk", "test")
    '        'Dim sError As String = SendSMS("07507342793@evotext.net", sCode)
    '        'SaveTextToFile("", "DEVELOPMENT - s_SendSMS SENT TO DEV TEL")

    '        If sError.Trim <> "" Then
    '            lblStatus.Text = sError
    '        Else
    '            lblStatus.Text = "SMS sent with code to login - must be changed on first login"
    '        End If

    '    End If


    'End Sub






    Protected Sub cmdVerifyCode_Click(sender As Object, e As EventArgs) Handles cmdVerifyCode.Click

		' SPLIT OUT THE VERIFICATION CODE AND PASSWORD; FIRST 4 DIGITS=VERIFICATIONCODE AND NEXT 4 DIGITS = NEW PASSWORD
		' E.G. 79AB9898: 79AB = VERIFICATION CODE AND 8989 = NEW PASSWORD
		Dim sVerificationCode As String = ""
		Dim sNewPassword As String = ""
		If txtVerificationCode.Text.Trim <> "" Then
			If txtVerificationCode.Text.Trim.Length >= 8 Then

				sVerificationCode = txtVerificationCode.Text.Trim.Substring(0, 4)
				lblTemp.Text = txtVerificationCode.Text.Trim.Substring(4) ' new password any letters from index = 4 to end


				If sVerificationCode.Trim <> "" Then

					Dim sGetError As String = ""
					Dim outPhoneCode As String = ""
					Dim outEmailCode As String = ""
					Using lib1 As New clsDB(BIWindowsConnectionString)
						' 1. get Stored info for comparison
						sGetError = lib1.GetVerificationCodes(lblWindowsUsername.Text, outPhoneCode, outEmailCode)
					End Using

					If sGetError.Trim <> "" Then
						lblStatus.Text = sGetError
					Else

						If sVerificationCode.Trim = outPhoneCode.Trim Then
							' OK = Email Verified or Phone Verified or Email Verification Failed or Phone Verification Failed
							Using lib1 As New clsDB(BIWindowsConnectionString)
								' 1. get Stored info for comparison
								sGetError = lib1.CheckVerificationCode(lblWindowsUsername.Text, sVerificationCode.Trim, "")
							End Using

							If sGetError.Trim.ToLower.Contains(("Failed").ToLower) Then
								' failed - return error
								lblStatus.Text = "ERROR: " & sGetError
							Else
								' OK: check session to see if they clicked the forgotten password and if they did, send SMS with new password
								' if they didn't, then redirect them to the login page

								Dim bSendNewPassword As Boolean = False
								lblStatus.Text = "Phone verified successfully"
								Session("action") = "NewPasswordStep4"
								pnlNewPasswordStep1.Visible = False
								pnlNewPasswordStep2.Visible = False
								pnlNewPasswordStep3.Visible = False
								pnlNewPasswordStep4.Visible = True

							End If

						ElseIf sVerificationCode.Trim = outEmailCode.Trim Then
							' OK = Email Verified or Phone Verified or Email Verification Failed or Phone Verification Failed
							Using lib1 As New clsDB(BIWindowsConnectionString)
								' 1. get Stored info for comparison
								sGetError = lib1.CheckVerificationCode(lblWindowsUsername.Text, "", sVerificationCode.Trim)
							End Using

							If sGetError.Trim.ToLower.Contains(("Failed").ToLower) Then
								' failed - return error
								lblStatus.Text = "ERROR: " & sGetError
							Else
								' OK: check session to see if they clicked the forgotten password and if they did, send SMS with new password
								' if they didn't, then redirect them to the login page

								lblStatus.Text = "Email verified successfully"
								Session("action") = "NewPasswordStep4"
								pnlNewPasswordStep1.Visible = False
								pnlNewPasswordStep2.Visible = False
								pnlNewPasswordStep3.Visible = False
								pnlNewPasswordStep4.Visible = True

							End If

						Else

							' error - 
							lblStatus.Text = "ERROR: Wrong code entered"
						End If


					End If

				Else
					lblStatus.Text = "Please enter a valid verification code"
				End If


			Else
				lblStatus.Text = "Please enter a valid verification code"
			End If


		Else
			lblStatus.Text = "Please enter a verification code"
		End If




	End Sub




    Protected Sub cmdChangePassword_Click(sender As Object, e As EventArgs) Handles cmdChangePassword.Click

		' ideally, this needs to happen on the login page because there is complex code there that I don;t want to duplicate here
		' so we need to redirect to login page and automatically log the user in

		Dim bPasswordChangedSuccessfully As Boolean = False

		Session("action") = ""
        pnlNewPasswordStep1.Visible = False
        pnlNewPasswordStep2.Visible = False
        pnlNewPasswordStep3.Visible = False
        pnlNewPasswordStep4.Visible = False
		' redirect to requested page via the redirect to login page

		If (lblTemp.Text.Trim <> "") Then


			' 1. check the password fields, and save the new password
			If (txtNewPassword1.Text.Trim <> "") And (txtNewPassword2.Text.Trim <> "") Then

				If (txtNewPassword1.Text = txtNewPassword2.Text) Then
					' run the change password routine
					' and run the login sproc
					Dim sResult As String = ""
					Dim iResultFK As Integer = 0
					Using lib1 As New clsDB(BIWindowsConnectionString)
						iResultFK = lib1.ChangePassword(
					  sResult,
					  lblTemp.Text.Trim,
					  txtNewPassword1.Text.Trim,
					  txtNewPassword2.Text.Trim
					 )
					End Using

					If iResultFK = 11 Then
						bPasswordChangedSuccessfully = True
						lblStatus.Text = "Password changed successfully."
					Else
						lblStatus.Text = "ERROR: " & sResult
					End If

				Else
					lblStatus.Text = "ERROR: Passwords do not match"
				End If

			Else
				lblStatus.Text = "ERROR: Please fill in all fields"
			End If

			' 2. attempt to auto-login
			If bPasswordChangedSuccessfully Then
				Dim sAutoLoginLink As String = ""
				Try
					If Session("AutoLoginLinkChangePassword") IsNot Nothing Then
						sAutoLoginLink = Session("AutoLoginLinkChangePassword")
					End If
				Catch ex As Exception
				End Try

				If sAutoLoginLink.Trim <> "" Then
					' redirect to login page and autologin
					Session("NewPassword") = txtNewPassword2.Text
					Response.Redirect(sAutoLoginLink.Trim)
				End If
			End If



		Else
			lblStatus.Text = "ERROR: The verification details are incorrect. Please try again."

		End If



	End Sub




	Protected Sub lnkcmdCancel_Click(sender As Object, e As EventArgs) Handles lnkcmdCancel.Click
		Dim sRedirectURL As String = ""
		Try
			If Session("AutoLoginLinkChangePassword") IsNot Nothing Then
				sRedirectURL = Session("AutoLoginLinkChangePassword")
			End If
		Catch ex As Exception
			sRedirectURL = "Report.aspx"
		End Try

		ClearSessions()

		Response.Redirect(sRedirectURL)
	End Sub
End Class
